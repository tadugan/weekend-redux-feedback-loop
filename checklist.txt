TODO:

    Questions for instructors
        Q: event.preventDefault seems to override the 'required' property I set for my input.
        Is there a way to prevent the page from reloading when the submit button is pressed
        without ignoring my other properties?

    [x] Setup
        [x] Create SQL Database
        [x] npm install redux react-redux redux-logger
        [x] npm install react-router-dom 

    [x] React && Client Side
        [x] index.js
            [x] import redux 
            [x] create Reducers
                [x] Feelings
                [x] Understanding
                [x] Support 
                [x] Comments 
            [x] create storeInstance
                [x] combineReducers
                [x] applyMiddleware
            [x] add Provider

        [x] App.jsx
            [x] Router
                [x] Import HashRouter
                [x] Add Routes

        [x] Views/Components
            [x] "How are you feeling today?"
                [x] Numeric rating
                [x] Dispatch input to reducer 
                [x] Next button
                [x] Validate input

            [x] "How well are you understanding the content?"
                [x] Numeric rating
                [x] Dispatch input to reducer 
                [x] Next button
                [x] Validate input

            [x] "How well are you being supported?"
                [x] Numeric rating
                [x] Dispatch input to reducer 
                [x] Next button
                [x] Validate input

            [x] "Any comments you want to leave?"
                [x] Text input
                [x] Dispatch input to reducer 
                [x] Next button

            [x] Review Your Feedback
                [x] Display ratings
                [x] Submit button 
                [x] POST submission to database 

            [x] Submission Success Page
                [x] Thank You!
                [x] Leave New Feedback button
                    [x] Reset Survey, return to part 1

    [x] Server Side 
        [x] server.js
            [x] Setup express route

        [ ] feedback.router.js 
            [x] create router 
            [x] setup POST
            [ ] setup GET

    [x] Database

    Stretch Goals && extra features
        [x] radio buttons
            [x] Add radio button jsx 
            [x] capture value of button on click

        [x] Edit responses at review page
            [x] Add edit button to each review item
                [x] update components accordingly
            [x] Create reducer to store editMode toggle
            [x] send user back to respective page 
            [x] Conditional rendering to switch "next" button to "update"
                [x] Update button changes reducer value and sends back to review page
            [x] reset editMode toggle on submission 
            [x] add validation to review page before submission

        [ ] Material UI styling
            [x] npm install @material-ui/core 
            [x] npm install material ui icons
            [x] style edit buttons
            [x] style next buttons 
            [x] style update buttons 
            [ ] style leave new feedback



    Data model
    This is the object we will attempt to POST to the server on the review page.

        data: {
            feeling: 3,
            understanding: 3,
            support: 3,
            comments: 'string'
        }